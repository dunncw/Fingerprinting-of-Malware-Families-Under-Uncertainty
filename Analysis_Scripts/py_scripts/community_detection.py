import argparse
import glob
import os
import json
import time
import networkx as nx
from networkx.algorithms.community import girvan_newman
from community import community_louvain


def run_girvan_newman(graph, base_filename):
    # Run the Girvan-Newman algorithm to detect communities
    communities_gn = girvan_newman(graph)
    print("ran girvan newman")

    # Store communities as dictionaries
    communities_gn_dict = {i: sorted(list(c)) for i, c in enumerate(next(communities_gn))}
    print("Detected communities (Girvan Newman):", tuple(sorted(c) for c in next(communities_gn)))

    # Write the dictionaries to disk
    with open(f'output/communities/{base_filename}_gn.json', 'w') as fp:
        json.dump(communities_gn_dict, fp)


def run_louvain(graph, base_filename):
    # Run the Louvain algorithm to detect communities
    partition_louvain = community_louvain.best_partition(graph)
    print("ran louvain")

    # Store communities as dictionaries
    communities_louvain = {}
    for node, comm in partition_louvain.items():
        if comm not in communities_louvain:
            communities_louvain[comm] = []
        communities_louvain[comm].append(node)
    print("Detected communities (Louvain):", tuple(sorted(c) for c in communities_louvain.values()))

    communities_louvain_dict = {i: sorted(c) for i, c in communities_louvain.items()}

    # Write the dictionaries to disk
    with open(f'output/communities/{base_filename}_louvain.json', 'w') as fp:
        json.dump(communities_louvain_dict, fp)


def main(files):
    for file in files:
        print(file)
        start_time = time.time()  # record the start time

        # Read in the graph
        mst = nx.read_gml(file)
        print("read in graph")
        
        # Convert MST to undirected graph for community detection
        mst_undirected = mst.to_undirected()
        print("converted to undirected graph")

        # Get the base file name without the .gml extension
        base_filename = os.path.splitext(os.path.basename(file))[0]

        # Run community detection methods
        run_girvan_newman(mst_undirected, base_filename)
        run_louvain(mst_undirected, base_filename)

        end_time = time.time()  # record the end time
        elapsed_time = end_time - start_time  # calculate the elapsed time
        print(f"Elapsed time: {elapsed_time:.2f} seconds")  # print the elapsed time


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run community detection on given graph files.')
    parser.add_argument('files', metavar='F', type=str, nargs='*', help='the graph files to process')
    args = parser.parse_args()

    if not args.files:
        # If no files provided, process all files in hardcoded directory
        files = glob.glob('output/mst/*.gml')
    else:
        # Process provided files
        files = args.files

    main(files)
