import glob
import os
import json
import numpy as np
import pandas as pd
from collections import Counter

# Get the list of .json files in the directory
files = glob.glob('*.json')

labels_path = 'malware_api_class_master_labels.csv'

with open(labels_path, "r") as g:
    all_labels = g.read().split('\n')[:-1]  # Remove last blank newline from list

# use the labels 'Spyware' and 'Adware' for the first two families
selected_labels = ['Spyware', 'Adware']

# all_labels to be a list of all the corresponding labels for the selected traces
all_labels = [label for label in all_labels if label in selected_labels]

for file in files:
    # Read in the graph
    with open(file, 'r') as fp:
        communities = json.load(fp)
    
    # _______ confusion matrix ___
    
    # create a dictionary of the communities
    communities_dict = {key: [[int(trace), all_labels[int(trace)]] for trace in communities[key]] for key in communities}
    
    # create a dictionary with the count, majority label, and key for each community
    communities_dict_majority_label = {key: [len(labels), Counter(labels).most_common(1)[0][0], key] for key, labels in [(key, [list[1] for list in communities_dict[key]]) for key in communities_dict]}
    
    # get the unique labels from the list of all labels
    unique_labels = list(set(all_labels))

    # print the file name
    print(file)
    
    for label in unique_labels:
        # create a list of the communities with the matching majority label
        communities = [key for key in communities_dict_majority_label if communities_dict_majority_label[key][1] == label]
        # if there is only one community, rename the key to the actual label
        if len(communities) == 1:
            communities_dict[label] = communities_dict.pop(str(communities[0]))
        elif communities:
            # find the largest community in the list of communities
            largest_community = max(communities, key=lambda k: communities_dict_majority_label[k][0])
            # using the community number to find a key in the dictionary communities_dict rename that key to the actual label
            communities_dict[label] = communities_dict.pop(str(largest_community))

    # Initialize a confusion matrix
    predictions = np.append(unique_labels, 'Not Labeled')
    confusion_matrix = pd.DataFrame(0, index=unique_labels, columns=predictions)

    # Compute the confusion matrix
    for key, values in communities_dict.items():
        if key in unique_labels:
            for value in values:
                trace_number, label = value
                # if the actual label matches the key its a true positive. they are strings so make sure they match
                if str(label) == key:
                    # It's a true positive
                    confusion_matrix.loc[key, key] += 1
                else:
                    # It's a false positive
                    confusion_matrix.loc[label, key] += 1
        if key not in unique_labels:
            for value in values:
                trace_number, label = value
                # false negative
                confusion_matrix.loc[label, 'Not Labeled'] += 1
    
    # Get the base file name without the .json extension
    base_filename = os.path.splitext(os.path.basename(file))[0]
    
    # Write the confusion matrix to a .csv file
    confusion_matrix.to_csv(f'{base_filename}_confusion_matrix.csv')

    #print the file name and the the confusion matrix
    print(f'{base_filename} confusion matrix:')
    print(confusion_matrix)
    print('\n')
